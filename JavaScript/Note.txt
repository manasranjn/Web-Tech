# JavaScript:-
-JavaScript is a scripting and programming language, introduced to perform live-scripting or dynamic responsive on a web-page.
-Netscape Communications hired 'Brendan Eich' to develop a scripting language for their browser, Netscape Navigator. Eich created JavaScript in just 10 days.
-The language was first called "MOCHA", then LiveScript, and finally JavaScript—not because it's related to Java, but as a marketing decision to capitalize on Java’s popularity.
-JavaScript is used for building logics of a web page.
-JavaScript is a high level programming language, used in both client side as well as server side.
-Currently we are using JavaScript version 6 i.e ES6(Echma script 6), which is also called as vanilla JavaScript.
-Node JS is the run time environment of JavaScript.

## What is Scripting language ?
-A scripting language is a type of programming language used to automate tasks that executes line by line.
-For example - JavaScript, Python, PHP... etc.

# Variable Keywords in JS:-
-Variable keywords are used to declare a variable and to initialize a value to variables.
-There are three types of variable keywords:-
    -var
    -let
    -const 
## var:- If a variable is decalred using var keyword then we can re-declare and re-initialize the same variable.

## let:- If a variable is decalred using let keyword then we can re-initialize the same variable but we can't re-declare the same variable.

## const:- Const stands for constant variable.
-If a variable is decalred using const keyword then neither we re-declare nor re-initialize the same variable.

# Datatypes in JS:- 
-Datatypes are used to define which type of value we're storing on a variable.
- By using 'typeof' operator we can check the datatype of a varibale.
-There are two types of datatypes in JavaScript:-
    1.Primitive type
    2.Non-primitive type
Note:- JavaScript is a dynamic typed language that means, datatype of a variable is assigned based on the value passed by the user during runtime.

1. Primitive-type:-
## Number type:- Represents all the possible types of numeric values; like - positive, negative, fraction, whole number, etc..

## boolean type:- It has only two types of values, i.e true and false.
-In JavaScript value of true is 1 and value of false is 0.

## null type:- Null means nothing, which is inherited from Object type. It stores nothing.

## undefined type:-When a variable is declared but not assigned a value, it is automatically initialized with undefined.

## Symbol type:– Used for creating unique values (Symbol("unique"))
-To create a Symbol type variable we need Symbol() operator.

## BigInt type:– Handles very large numbers (BigInt())
-To create a BigInt type varibale we need BigInt() operator.

2. Non-primitive type or Reference Datatype
-Reference datatypes are the type of datatype which can hold multiple element in a single variable.
-Reference datatypes are -> array, object, function
## Array :-Array is a collection of heterogenious(different datatypes) type of data.
-Array indexing start from "0", and to access any value we can use the index position, and arrays are dynamic in size.
-Arrays are used to store multiple values inside a single variable.
ex. let arr = ["hari", "sita", "ram"] 0 1 2

## Object :-Objects are complex data types used to store collection of key value pairs.
-Objects can contain various datatypes, including primitive and non-primitive.
-Keys are unique within an object, and they are used to access the values.
-We can access the value of an object by using dot notation (object.keyName) or bracket notation (object["keyname"]).

ex:-
let obj = { name : "hari", 
    phone : 56789032, 
    address : "bhubaneswar" 
    }
-In the above example left side element are the keys & right side elements are the values of that key.

# Function :-
-functions are the block of code or set of instruction which are used to perform some specif task.
-function reduce our code complexity and help organize logic, improve readability, and make code reusable.
-We need 'function' keyword to create a function in JS.

Syntax :-
function functionName(){ 
    //instruction
 }

function calling ->
functionName();

# Operators in JS:- Operators are symbols used to perform operations on one or more variable and values.

## Arithmetic Operator:-
1. Addition (+): Adds two operands.
2. Subtraction (-): Subtracts right operand from left operand.
3. Multiplication (*): Multiplies two operands.
4. Division (/): Divides left operand by right operand.
5. Modulus (%): Returns the remainder of the division of left operand by right operand.
6. Exponent (**): Used to raise a number to a power.

## Assignment Operator:- 
1. Simple Assignment (=): Assigns a value to a variable.
2. Addition Assignment (+=): Adds the right operand to the left operand and assigns the result to left operand.
3. Subtraction Assignment (-=): Subtracts the right operand from the left operand and assigns the result to left operand.
4. Multiplication Assignment (*=): Multiplies the left operand by the right operand and assigns the result to left operand.
5. Division Assignment (/=): Divides the left operand by the right operand and assigns the result to left operand.
6. Remainder Assignment (%=): Assigns the remainder of division between left and right operands to left operand.
7. Exponentiation Assignment (**=): Raises the left operand to the power of the right operand and assigns the result to left operand.

## Comparision Operator:- 
1. Equal to (==): Compares if two operands are equal.
2. Not equal to (!=): Compares if two operands are not equal.
3. Strict equal to (===): Compares if two operands are equal and of the same data type.
4. Strict not equal to (!==): Compares if two operands are not equal and of the same data type.
5. Greater than (>): Checks if left operand is greater than right operand.
6. Less than (<): Checks if left operand is greater than or equal to right operand.
7. Greater than equal to (>=): Checks if left operand is greater than or equal to right operand.
8. Less than equal to (<=): Checks if left operand is less than or equal to right operand.

## Logical Opercators :-
1. Logical AND (&&): Returns true if both operands are true.
2. Logical OR (||): Returns true if either of the operands is true.
3. Logical NOT (!): Returns the opposite of the operand's boolean value.

# Conditional Statement :-
-To implement some condition in the code.
-There are 3 types of conditional statements are there
## if Condition :-
-When we have one statement which we want to execute based on a condition then we use ifcondition. If the condition is true then statement will execute.
Syntax :- if (condition){ statement }

## if-else Condition :-
-When we have two statements but one condition then we use if-else condition.
-If the condition is true then statement under if block will execute if the condition is false then the else block will execute. otherwise false.
Syntax :- if (condition){ statement } else { statement }

## if-elif condition :-
-When we have multiple statement and multiple condition then we use elseif condition.
Syntax :- if (condition){ 
    statement 
    } 
    else if(condition){ 
        statement 
    } else if(condition){ 
        statement 
    } else { 
        statement }

## Switch case :-
-Switch statement is used to execute different blocks of code based on the value of an expression. 
-It provides a cleaner alternative to multiple if-else conditions.

Syntax:- 
switch (expression) {
    case value1:
        // Code to execute if expression === value1
        break;
    case value2:
        // Code to execute if expression === value2
        break;
    default:
        // Code to execute if no case matches
}

# Loops in JS:-
When we have to run the same set of instruction over and over again, each time with a different or with same value then we use loops.

## for loop:-
- for loops provides concise way of writting the loop structure containing initializaton, condition, and iteration in one line.
-A for loop repeats until a specified condition evaluates to false.
Syntax:-
for(initializaton; condition; iteration){
    //instruction
}

## while loop:- 
- When we know starting point but we don't know the ending point, we use while loop.
Syntax:-
initializaton;
while(condition){
    //instruction
    iteration;
}

## do-while loop:-
- do-while loop is similar to the while loop, but the only difference is that it executes the instruction first then it checks the condition. That's why even if the condition is false still the block of code will execute at-least once.
Syntax:-
initializaton;
do{
    //instruction
    iteration;
}while(condition);

## for-of loop:-
- for-of is a loop that iterates through the values of an iterable (such as an array or string).
- It directly provides each value of the iterable, which can be processed within the loop.
Syntax:- 
for(let iterator of variable){
    //instruction
}

## for-in loop:-
- for-in is a loop that iterates through the keys of an object.
Syntax:- 
for(let iterator in variable){
    //instruction
}